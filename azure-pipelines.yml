variables:
- group: aksopenhack2019variables
- name: baseImageName
  value: aksopenhack2019

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

stages:
- stage: BuildAndAnalyzeTheSourceCode
  jobs:
  - job: Build
    steps:
    - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
      displayName: 'Prepare analysis on SonarCloud'
      inputs:
        SonarCloud: aksopenhack2019
        organization: aksopenhack2019js
        scannerMode: CLI
        configMode: manual
        cliProjectKey: aksopenhack2019
        cliProjectName: 'SoftwareOne AKS Openhack'


    - script: sudo npm update && sudo npm install -g mocha && sudo npm install -g mocha-junit-reporter && sudo npm install -g chai && sudo npm install -g nyc && sudo npm install request -g

      displayName: "install npm modules"


    - task: SnykSecurityScan@0
      displayName: 'Snyk scan for open source vulnerabilities'
      inputs:
        serviceConnectionEndpoint: 'snyk_updated_connection'
        testType: 'app'
        targetFile: 'package.json'
        monitorOnBuild: true
        failOnIssues: false    
      
    - script: |
        sudo nyc --reporter cobertura --reporter html mocha test/test.js --reporter mocha-junit-reporter --reporter-options mochaFile=TEST-RESULTS.xml --exit
        sudo chmod 777 . -R
      displayName: "Run Unit Tests inside the Microsoft-Hosted agent"

    # Publish Test Results to Azure Pipelines/TFS 
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'TEST-RESULTS.xml'

    - task: PublishCodeCoverageResults@1
      inputs: 
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/coverage'

    - task: SonarCloudAnalyze@1

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          kubernetes/*
          kubernetes/**/*
          kubernetes/**/**/*
          terraform/*
          test/techjmeter.jmx
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1

#docker security

- stage: ScanningTheContainer
  jobs:
  - job: Sysdig
    container:
      image: sysdiglabs/secure_inline_scan:latest
      options: -v /usr/bin/docker:/usr/bin/docker -v /var/run/docker.sock:/var/run/docker.sock
    steps:
    - script: |
        docker build -t $(baseImageName) --build-arg VERSION=$(Build.BuildId) -f Dockerfile.prod .
        docker build -t $(baseImageName)-test -f Dockerfile.test .
      displayName: "Build Docker Images"
    #analyse image
    - script: inline_scan analyze -s https://secure.sysdig.com -k $(sysdigApiKey) $(baseImageName):latest
      displayName: Scan image

    - script: |
        docker run --rm --name $(baseImageName)-test $(baseImageName)-test
      displayName: "Run Unit Tests inside the Container"
      
    - script: |
        docker tag $(baseImageName) $(acrId).azurecr.io/$(baseImageName):latest
        docker tag $(baseImageName) $(acrId).azurecr.io/$(baseImageName):$(Build.BuildId)
      displayName: "Tag Prod Docker Image"
      


    - script: |
        docker image ls
        docker login -u $(acrId) -p $(acrPassword) $(acrId).azurecr.io
        docker push $(acrId).azurecr.io/$(baseImageName):latest
        docker push $(acrId).azurecr.io/$(baseImageName):$(Build.BuildId)
      displayName: "Push Docker Images To ACR"





