## Altug Yildirim

name: Node.js CI

on:
  push:
    branches:
      - master

      - dev
      - release/*
#  pull_request:
#    branches:
#      - master

jobs:
  build:
    env:
      JOB_STATUS_UNIT: ok
      JOB_STATUS_SCA: ok
    runs-on: ubuntu-latest
#    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [10.x] #[10.x, 12.x]
#        os: [ubuntu-latest, windows-latest,macOS-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - uses: actions/cache@v1
      if: runner.os != 'Windows'
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
      env:
        CI: true
    - name: Slack Notification for Unit Tests
      uses: bryan-nice/slack-notification@master
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Failure'
        SLACK_MESSAGE: 'You cannot pass the tests... Check your unit tests! workflow: ${{ github.workflow }} run id: ${{ github.run_id	}}	'
      if: failure()
    - name: Set Unit Test Status
      id: unitslack 
      run: |
        echo "::set-output name=JOB_STATUS_UNIT::failed"
      if: failure()
    - name: Check outputs
      run: |
        echo "Pull Request Number - ${{ steps.test.outputs }}"
        echo "Pull Request Number - ${{ steps.unitslack.outputs.JOB_STATUS_UNIT }}"
        echo "Pull Request Number - $JOB_STATUS_UNIT"
      if: always()
    # SAST    
    #- name: SonarCloud Scan
    #  uses: sonarsource/sonarcloud-github-action@master  
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.github }}
    #    SONAR_TOKEN: ${{ secrets.sonarcloud }}
    # SCA     
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.snyk }}
      with:
        command: monitor
        args: --severity-threshold=high
    - name: Slack Notification for Snyk
      if: steps.unitslack.outputs.JOB_STATUS_UNIT != 'failed' && failure()
      uses: bryan-nice/slack-notification@master
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Failure'
        SLACK_MESSAGE: 'You got an error during SCA Step, Snyk! workflow: ${{ github.workflow }} run id: ${{ github.run_id	}}	'

    # Connect to Azure Container registry (ACR)
    # test
    - uses: azure/docker-login@v1 
      with:
        login-server: acraltug.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    # Docker build and push to a Azure Container registry (ACR)
    - run: |
       docker build . -t acraltug.azurecr.io/k8sdemo:${{ github.sha }} -f Dockerfile.prod
       docker push acraltug.azurecr.io/k8sdemo:${{ github.sha }}
    # Set the target AKS cluster.
    - name: Slack Notification for Build
      uses: bryan-nice/slack-notification@master
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Build'
        SLACK_MESSAGE: 'Your build is completed! successfully pushed to repo acraltug.azurecr.io/k8sdemo:${{ github.sha }}'
  staging:
    # deploy to AKS
    needs: build
    runs-on: ubuntu-latest
    steps:    
    # download binary
    - uses: actions/checkout@v2
    # - name: Set up Python 3.8
    #   uses: actions/setup-python@v1
    #   with:
    #     python-version: "3.8.2"
    # - name: Install dependencies
    #   run: |
    #     echo "check python version"
    #     python -V
    #     python -m pip install --upgrade pip
    #     python -m pip install pipenv
    # start AKS things
    - uses: azure/aks-set-context@v1 
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}' 
        cluster-name: swoaks01
        resource-group: altug
    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1 
      with:
        container-registry-url: acraltug.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }} 
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }} 
        secret-name: acr-secret
        namespace: githubactionsdemo
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1 
      with:
        namespace: githubactionsdemo
        manifests: |
          kubernetes/demodeployment.yaml
        images: |
          acraltug.azurecr.io/k8sdemo:${{ github.sha }} 
        imagepullsecrets: |
          acr-secret
          namespace: githubactionsdemo
    ## generating report and pull request

    #- name: AUTHORS
    #  run: |
    #    git log --format='%aN <%aE>%n%cN <%cE>' | sort -u > AUTHORS
    # - name: Create Pull Request
    #   id: cpr
    #   uses: peter-evans/create-pull-request@v2
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     branch: dev
    #- name: Create report file
    #  run: ${{ env.PULL_REQUEST_NUMBER }} > report.txt
    #- name: Check outputs
    #  run: |
    #    echo "Pull Request Number - ${{ env.PULL_REQUEST_NUMBER }}"
    #    echo "Pull Request Number - ${{ steps.cpr.outputs.pr_number }}"
    - uses: actions/checkout@master
    
    - name: Slack Notification for Failure
      uses: bryan-nice/slack-notification@master
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Failure'
        SLACK_MESSAGE: 'You got an error during staging deployment period! pr number: ${{ env.PULL_REQUEST }} workflow: ${{ github.workflow }} run id: ${{ github.run_id	}}'
      if: failure()
  pull-request:
    if: github.ref != 'refs/heads/dev' && github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: staging
    steps:
    - uses: actions/checkout@v1
    - name: pull-request
      uses: repo-sync/pull-request@v2
      with:
        source_branch: ""                     # If blank, default: triggered branch
        destination_branch: "dev"          # If blank, default: master
        pr_title: "Pulling ${{ github.ref }} into dev"
        pr_body: ":crown: *An automated PR*"  # Full markdown support, requires pr_title to be set
        #pr_reviewer: "wei,worker"             # Comma-separated list (no spaces)
        #pr_assignee: "wei,worker"             # Comma-separated list (no spaces)
        pr_label: "auto-pr"                   # Comma-separated list (no spaces)
        #pr_milestone: "Milestone 1"           # Milestone name
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Slack Notification for Staging
      uses: bryan-nice/slack-notification@master
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Slack Notification for Staging'
        SLACK_MESSAGE: 'Your code is on staging! pr number: ${{ env.PULL_REQUEST_NUMBER }} workflow: ${{ github.workflow }} run id: ${{ github.run_id	}}'

  production:
    if: github.ref == 'refs/heads/master'
    # deploy to AKS
    needs: build
    runs-on: ubuntu-latest
    steps:    
    # download binary
    - uses: actions/checkout@v2
    # start AKS things
    - uses: azure/aks-set-context@v1 
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}' 
        cluster-name: swoaks01
        resource-group: altug
    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1 
      with:
        container-registry-url: acraltug.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }} 
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }} 
        secret-name: acr-secret
        namespace: githubactionsdemo
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1 
      with:
        namespace: githubactionsdemo
        manifests: |
          kubernetes/demodeployment.yaml
        images: |
          acraltug.azurecr.io/k8sdemo:${{ github.sha }} 
        imagepullsecrets: |
          acr-secret
          namespace: githubactionsdemo
    ## generating report and pull request
    - name: Slack Notification for Production
      uses: bryan-nice/slack-notification@master
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Slack Notification for Production'
        SLACK_MESSAGE: 'Your code is on production! pr number: ${{ env.PULL_REQUEST_NUMBER }} workflow: ${{ github.workflow }} run id: ${{ github.run_id	}}'

    #- name: AUTHORS
    #  run: |
    #    git log --format='%aN <%aE>%n%cN <%cE>' | sort -u > AUTHORS
    # - name: Create Pull Request
    #   id: cpr
    #   uses: peter-evans/create-pull-request@v2
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     branch: dev
    #- name: Create report file
    #  run: ${{ env.PULL_REQUEST_NUMBER }} > report.txt
    #- name: Check outputs
    #  run: |
    #    echo "Pull Request Number - ${{ env.PULL_REQUEST_NUMBER }}"
    #    echo "Pull Request Number - ${{ steps.cpr.outputs.pr_number }}"
    - uses: actions/checkout@master
    
    - name: Slack Notification for Failure
      uses: bryan-nice/slack-notification@master
      env:

        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Failure'
        SLACK_MESSAGE: 'You got an error during production deployment period! pr number: ${{ env.PULL_REQUEST }} workflow: ${{ github.workflow }} run id: ${{ github.run_id	}}'
      if: failure()